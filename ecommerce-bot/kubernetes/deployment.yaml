# Production Kubernetes Deployment for E-Commerce WhatsApp Bot
---
apiVersion: v1
kind: Namespace
metadata:
  name: ecommerce-bot
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: ecommerce-bot-config
  namespace: ecommerce-bot
data:
  LOG_LEVEL: "INFO"
  LOG_FORMAT: "json"
  ENABLE_METRICS: "true"
  METRICS_PORT: "9090"
  CONNECTION_WARMER_ENABLED: "true"
  CONNECTION_WARMER_INTERVAL: "60"
  RATE_LIMIT_ENABLED: "true"
  RATE_LIMIT_REQUESTS: "100"
  RATE_LIMIT_WINDOW: "60"
  MCP_SERVER_HOST: "mcp-server-service"
  MCP_SERVER_PORT: "5555"
  MCP_CLIENT_POOL_SIZE: "10"
  MCP_CONNECTION_TIMEOUT: "30"
  MCP_MAX_IDLE_TIME: "300"
  REDIS_SESSION_TTL: "86400"
  REDIS_MAX_CONNECTIONS: "100"
---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: ecommerce-bot-secrets
  namespace: ecommerce-bot
type: Opaque
stringData:
  ENABLEX_APP_ID: "688704c91808ff90f000ec85"
  ENABLEX_APP_KEY: "quUyXyeyvyqyuuveMypaZeLanyVaHeJujy3y"
  ENABLEX_WEBHOOK_SECRET: "your-webhook-secret"
  ENABLEX_WHATSAPP_NUMBER: "919599425455"
  AZURE_OPENAI_API_KEY: "your-azure-api-key"
  GROQ_API_KEY: "your-groq-api-key"
  OPENAI_API_KEY: "your-openai-api-key"
  RAZORPAY_KEY_ID: "your-razorpay-key"
  RAZORPAY_KEY_SECRET: "your-razorpay-secret"
  AWS_ACCESS_KEY_ID: "your-aws-key"
  AWS_SECRET_ACCESS_KEY: "your-aws-secret"
---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: ecommerce-bot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        command: ["redis-server"]
        args: 
        - "--appendonly"
        - "yes"
        - "--maxmemory"
        - "256mb"
        - "--maxmemory-policy"
        - "allkeys-lru"
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: ecommerce-bot
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
# MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: ecommerce-bot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_DATABASE
          value: "ecommerce_bot"
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "admin"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: password
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mongodb-data
        persistentVolumeClaim:
          claimName: mongodb-pvc
---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: ecommerce-bot
spec:
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
  type: ClusterIP
---
# Webhook Deployment (Main Application)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhook-deployment
  namespace: ecommerce-bot
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: webhook
  template:
    metadata:
      labels:
        app: webhook
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - webhook
              topologyKey: kubernetes.io/hostname
      containers:
      - name: webhook
        image: ecommerce-bot:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: HOST
          value: "0.0.0.0"
        - name: PORT
          value: "8000"
        - name: WORKERS
          value: "4"
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PORT
          value: "6379"
        - name: MONGODB_URL
          value: "mongodb://admin:password@mongodb-service:27017/ecommerce_bot?authSource=admin"
        envFrom:
        - configMapRef:
            name: ecommerce-bot-config
        - secretRef:
            name: ecommerce-bot-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          failureThreshold: 30
        volumeMounts:
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: logs
        emptyDir: {}
---
# Webhook Service
apiVersion: v1
kind: Service
metadata:
  name: webhook-service
  namespace: ecommerce-bot
  labels:
    app: webhook
spec:
  selector:
    app: webhook
  ports:
  - name: http
    port: 80
    targetPort: 8000
  - name: metrics
    port: 9090
    targetPort: 9090
  type: LoadBalancer
---
# MCP Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-server-deployment
  namespace: ecommerce-bot
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mcp-server
  template:
    metadata:
      labels:
        app: mcp-server
    spec:
      containers:
      - name: mcp-server
        image: ecommerce-bot-mcp-server:latest
        ports:
        - containerPort: 5555
        env:
        - name: REDIS_HOST
          value: "redis-service"
        - name: MONGODB_URL
          value: "mongodb://admin:password@mongodb-service:27017/ecommerce_bot?authSource=admin"
        envFrom:
        - configMapRef:
            name: ecommerce-bot-config
        - secretRef:
            name: ecommerce-bot-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          tcpSocket:
            port: 5555
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 5555
          initialDelaySeconds: 10
          periodSeconds: 5
---
# MCP Server Service
apiVersion: v1
kind: Service
metadata:
  name: mcp-server-service
  namespace: ecommerce-bot
spec:
  selector:
    app: mcp-server
  ports:
  - port: 5555
    targetPort: 5555
  type: ClusterIP
---
# Horizontal Pod Autoscaler for Webhook
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: webhook-hpa
  namespace: ecommerce-bot
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: webhook-deployment
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: ecommerce-bot
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: ecommerce-bot
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd
---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ecommerce-bot-network-policy
  namespace: ecommerce-bot
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ecommerce-bot
    - podSelector: {}
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: ecommerce-bot
    - podSelector: {}
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443  # HTTPS
    - protocol: TCP
      port: 80   # HTTP
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: webhook-pdb
  namespace: ecommerce-bot
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: webhook
---
# Ingress with TLS
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ecommerce-bot-ingress
  namespace: ecommerce-bot
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/limit-rps: "10"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - api.ecommerce-bot.com
    secretName: ecommerce-bot-tls
  rules:
  - host: api.ecommerce-bot.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: webhook-service
            port:
              number: 80